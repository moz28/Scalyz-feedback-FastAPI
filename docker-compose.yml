
services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-feedback_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-feedback_password}
      POSTGRES_DB: ${POSTGRES_DB:-feedback_db}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-feedback_user} -d ${POSTGRES_DB:-feedback_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - feedback-network
    restart: unless-stopped

  api:
    build: .
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-feedback_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-feedback_password}
      POSTGRES_DB: ${POSTGRES_DB:-feedback_db}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - feedback-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/healthz', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  pgdata:
    driver: local

networks:
  feedback-network:
    driver: bridge